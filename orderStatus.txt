//Server.ts configuration for Socket.io

import http from 'http';
import { Server } from 'socket.io';

const app = express();
const server = http.createServer(app);
const io = new Server(server);



// WebSocket connection
io.on('connection', (socket) => {
  console.log('A user connected');

  // Handle disconnection
  socket.on('disconnect', () => {
    console.log('A user disconnected');
  });
});


//get order status
import { Request, Response } from 'express';
import { ORDER_STATUS } from '../utils/orderStatusConstants'
import OrderService from '../services/orderService';

const getOrderStatus = async (req: Request, res: Response) => {
  const { orderId } = req.params;
  const buyerId = req.userId; // Assuming the authenticated buyer's ID is available in req.userId

  try {
    const order = await OrderService.getOrderByIdAndBuyerId(orderId, buyerId);

    if (!order) {
      return res.status(404).json({ message: 'Order not found' });
    }

    return res.status(200).json({
      orderId: order.orderId,
      orderStatus: order.orderStatus,
    });
  } catch (error) {
    return res.status(500).json({ message: 'Internal server error' });
  }
};

// update order status
import { Request, Response } from 'express';
import { ORDER_STATUS } from '../utils/orderStatusConstants'
import OrderService from '../services/orderService';

const updateOrderStatus = async (req: Request, res: Response) => {
  const { orderId } = req.params;
  const { orderStatus } = req.body;


  // Validate the orderStatus value
  if (!Object.values(ORDER_STATUS).includes(orderStatus)) {
    return res.status(400).json({ message: 'Invalid order status' });
  }

  try {
    
    const updatedOrder = await OrderService.updateOrderStatus(orderId, orderStatus);

    if (!updatedOrder) {
      return res.status(404).json({ message: 'Order not found' });
    }

    // Emition of WebSocket event to notify the frontend about the order status update
    io.emit('orderStatusUpdate', {
      orderId: updatedOrder.orderId,
      orderStatus: updatedOrder.orderStatus,
    });

    return res.status(200).json({
      orderId: updatedOrder.orderId,
      orderStatus: updatedOrder.orderStatus,
    });
  } catch (error) {
    return res.status(500).json({ message: 'Internal server error' });
  }
};


//order services

import Order from '../models/orderModel';
import { ORDER_STATUS } from '../utils/orderStatusConstants';

const getOrderByIdAndBuyerId = async (orderId: string, buyerId: number) => {
  return await Order.findOne({
    where: {
      orderId,
      buyerId,
    },
  });
};

const updateOrderStatus = async (orderId: string, orderStatus: string) => {
  //validating if the orderStatus is legit from our predefined status constants
  if (!Object.values(ORDER_STATUS).includes(orderStatus)) {
    throw new Error('Invalid order status');
  }

  return await Order.update(
    { orderStatus },
    {
      where: {
        orderId,
      },
      returning: true, // Return the updated order instance
    }
  );
};
